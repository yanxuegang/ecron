// Code generated by MockGen. DO NOT EDIT.
// Source: ./preempter.go
//
// Generated by this command:
//
//	mockgen -source=./preempter.go -package=daomysqlmocks -destination=./mocks/preempter.mock.go
//

// Package daomysqlmocks is a generated GoMock package.
package daomysqlmocks

import (
	context "context"
	reflect "reflect"

	task "github.com/ecodeclub/ecron/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MocktaskRepository is a mock of taskRepository interface.
type MocktaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MocktaskRepositoryMockRecorder
}

// MocktaskRepositoryMockRecorder is the mock recorder for MocktaskRepository.
type MocktaskRepositoryMockRecorder struct {
	mock *MocktaskRepository
}

// NewMocktaskRepository creates a new mock instance.
func NewMocktaskRepository(ctrl *gomock.Controller) *MocktaskRepository {
	mock := &MocktaskRepository{ctrl: ctrl}
	mock.recorder = &MocktaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktaskRepository) EXPECT() *MocktaskRepositoryMockRecorder {
	return m.recorder
}

// PreemptTask mocks base method.
func (m *MocktaskRepository) PreemptTask(ctx context.Context, tid int64, oldOwner, newOwner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptTask", ctx, tid, oldOwner, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreemptTask indicates an expected call of PreemptTask.
func (mr *MocktaskRepositoryMockRecorder) PreemptTask(ctx, tid, oldOwner, newOwner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptTask", reflect.TypeOf((*MocktaskRepository)(nil).PreemptTask), ctx, tid, oldOwner, newOwner)
}

// RefreshTask mocks base method.
func (m *MocktaskRepository) RefreshTask(ctx context.Context, tid int64, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTask", ctx, tid, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTask indicates an expected call of RefreshTask.
func (mr *MocktaskRepositoryMockRecorder) RefreshTask(ctx, tid, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTask", reflect.TypeOf((*MocktaskRepository)(nil).RefreshTask), ctx, tid, owner)
}

// ReleaseTask mocks base method.
func (m *MocktaskRepository) ReleaseTask(ctx context.Context, t task.Task, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseTask", ctx, t, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseTask indicates an expected call of ReleaseTask.
func (mr *MocktaskRepositoryMockRecorder) ReleaseTask(ctx, t, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseTask", reflect.TypeOf((*MocktaskRepository)(nil).ReleaseTask), ctx, t, owner)
}

// TryPreempt mocks base method.
func (m *MocktaskRepository) TryPreempt(ctx context.Context, f func(context.Context, []task.Task) (task.Task, error)) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryPreempt", ctx, f)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryPreempt indicates an expected call of TryPreempt.
func (mr *MocktaskRepositoryMockRecorder) TryPreempt(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryPreempt", reflect.TypeOf((*MocktaskRepository)(nil).TryPreempt), ctx, f)
}
